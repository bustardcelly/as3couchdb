/**
 * <p>Original Author: toddanderson</p>
 * <p>Class File: SaltedPassword.as</p>
 * <p>Version: 0.7</p>
 *
 * <p>Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 *
 * <p>The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.</p>
 *
 * <p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.</p>
 *
 * <p>Licensed under The MIT License</p>
 * <p>Redistributions of files must retain the above copyright notice.</p>
 */
package com.custardbelly.as3couchdb.util
{
	import com.hurlant.crypto.hash.SHA1;
	
	import flash.errors.IllegalOperationError;
	import flash.utils.ByteArray;
	import flash.utils.Endian;

	/**
	 * Salted password is a convenience utility class to create a password and its salt. 
	 * CouchDB uses a SHA1 algorithm for password security.
	 * @author toddanderson
	 */
	public class SaltedPassword
	{
		public var salt:String;
		public var password:String;
		
		/**
		 * Constructor. 
		 * @param salt String
		 * @param password String
		 * @param generationEnforcer GenerationEnforcer Enforcer class to ensure that the SaltedPassword model was generated by this class.
		 */
		public function SaltedPassword( salt:String, password:String, generationEnforcer:GenerationEnforcer )
		{
			if( generationEnforcer == null )
			{
				throw new IllegalOperationError( "A SaltedPassword instance must be created through: SalterPassword.generate( str );" );
			}
			this.salt = salt;
			this.password = password;
		}
		
		/**
		 * Utilty method to generate a salted password. 
		 * @param password String The original password to salt.
		 * @return SaltedPassword The filled model of salt and salted password.
		 */
		static public function generate( password:String ):SaltedPassword
		{
			var salt:String = UUID.generateSHA1( "http://127.0.0.1:5984" );
			var passwordSHA:String = hexSHA( password, salt );
			return new SaltedPassword( salt, passwordSHA, new GenerationEnforcer() );
		}
		
		/*
		* Derived from:
		*         A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
		*         in FIPS PUB 180-1
		*         Version 2.1a Copyright Paul Johnston 2000 - 2002.
		*         Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
		*
		* hexSHA is a derivative work (http://pajhome.org.uk/crypt/md5/)
		* Those are Copyright (c) 1998-2002 Paul Johnston & Contributors (paj@pajhome.org.uk)
		*/
		public static function hexSHA( password:String, salt:String ):String
		{
			var src:ByteArray = new ByteArray();
			src.writeUTFBytes( password + salt );
			src.position = 0;
			
			var savedLength:uint = src.length;
			var savedEndian:String = src.endian;
			
			src.endian = Endian.BIG_ENDIAN;
			var len:uint = savedLength *8;
			// pad to nearest int.
			while (src.length%4!=0) {
				src[src.length]=0;
			}
			// convert ByteArray to an array of uint
			src.position=0;
			var a:Array = [];
			var i:uint;
			for (i=0;i<src.length;i+=4) {
				a.push(src.readUnsignedInt());
			}
			
			var bin:Array = core( a, len );
			var hex_tab:String = "0123456789abcdef";
			var salted:String = "";
			for( i = 0; i < bin.length * 4; i++)
			{
				salted += hex_tab.charAt((bin[i>>2] >> ((3 - i%4)*8+4)) & 0xF) +
					hex_tab.charAt((bin[i>>2] >> ((3 - i%4)*8  )) & 0xF);
			}
			return salted;
		}
		
		
		/*
		 * Derived from: 
		 * 			SHA1 
		 *			Copyright (c) 2007 Henri Torgemane
		 * 			as3crypto http://code.google.com/p/as3crypto/
		 * 
		 * The SHABase:core in as3crypto is not public and is needed in as3couchdb to access the byte array without encrypting further in SHABase:hash. 
		 */
		/**
		 * @private
		 */
		private static function core(x:Array, len:uint):Array
		{
			/* append padding */
			x[len >> 5] |= 0x80 << (24 - len % 32);
			x[((len + 64 >> 9) << 4) + 15] = len;
			
			var w:Array = [];
			var a:uint =  0x67452301; //1732584193;
			var b:uint = 0xEFCDAB89; //-271733879;
			var c:uint = 0x98BADCFE; //-1732584194;
			var d:uint = 0x10325476; //271733878;
			var e:uint = 0xC3D2E1F0; //-1009589776;
			
			for(var i:uint = 0; i < x.length; i += 16)
			{
				
				var olda:uint = a;
				var oldb:uint = b;
				var oldc:uint = c;
				var oldd:uint = d;
				var olde:uint = e;
				
				for(var j:uint = 0; j < 80; j++)
				{
					if (j < 16) {
						w[j] = x[i + j] || 0;
					} else {
						w[j] = rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);
					}
					var t:uint = rol(a,5) + ft(j,b,c,d) + e + w[j] + kt(j);
					e = d;
					d = c;
					c = rol(b, 30);
					b = a;
					a = t;
				}
				a += olda;
				b += oldb;
				c += oldc;
				d += oldd;
				e += olde;
			}
			return [ a, b, c, d, e ];
			
		}
		
		/*
		* Derived from: 
		* 			SHA1 
		*			Copyright (c) 2007 Henri Torgemane
		* 			as3crypto http://code.google.com/p/as3crypto/
		* 
		* The SHABase:core in as3crypto is not public and is needed in as3couchdb to access the byte array without encrypting further in SHABase:hash. 
		*/
		/**
		 * @private
		 */
		private static function rol(num:uint, cnt:uint):uint
		{
			return (num << cnt) | (num >>> (32 - cnt));
		}
		
		/*
		* Derived from: 
		* 			SHA1 
		*			Copyright (c) 2007 Henri Torgemane
		* 			as3crypto http://code.google.com/p/as3crypto/
		* 
		* The SHABase:core in as3crypto is not public and is needed in as3couchdb to access the byte array without encrypting further in SHABase:hash. 
		*/
		/**
		 * @private
		 */
		private static function ft(t:uint, b:uint, c:uint, d:uint):uint
		{
			if(t < 20) return (b & c) | ((~b) & d);
			if(t < 40) return b ^ c ^ d;
			if(t < 60) return (b & c) | (b & d) | (c & d);
			return b ^ c ^ d;
		}
		
		/*
		* Derived from: 
		* 			SHA1 
		*			Copyright (c) 2007 Henri Torgemane
		* 			as3crypto http://code.google.com/p/as3crypto/
		* 
		* The SHABase:core in as3crypto is not public and is needed in as3couchdb to access the byte array without encrypting further in SHABase:hash. 
		*/
		/**
		 * @private
		 */
		private static function kt(t:uint):uint
		{
			return (t < 20) ? 0x5A827999 : (t < 40) ?  0x6ED9EBA1 :
				(t < 60) ? 0x8F1BBCDC : 0xCA62C1D6;
		}
	}
}

internal class GenerationEnforcer{}